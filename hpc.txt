// BFS_DFS
#include <iostream>
#include <queue>
#include <vector>
#include <stack>
#include <omp.h>
using namespace std;

void bfs(int start, vector<vector<int>>& adj, vector<int>& visited) {
    queue<int> q;
    q.push(start);
    visited[start] = 1;

    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";

        // Process neighbors in parallel
        #pragma omp parallel for
        for (int i = 0; i < adj[node].size(); i++) {
            int neighbor = adj[node][i];
            if (!visited[neighbor]) {
                // Atomically set visited[neighbor] = 1 if it was 0
                if (__sync_bool_compare_and_swap(&visited[neighbor], 0, 1)) {
                    #pragma omp critical
                    {
                        q.push(neighbor);
                    }
                }
            }
        }
    }
}

void dfs(int start, vector<vector<int>>& adj, vector<int>& visited) {
    stack<int> stk;
    stk.push(start);
    visited[start] = 1;

    while (!stk.empty()) {
        int node = stk.top();
        stk.pop();
        cout << node << " ";

        // Process neighbors in parallel
        #pragma omp parallel for
        for (int i = 0; i < adj[node].size(); i++) {
            int neighbor = adj[node][i];
            if (!visited[neighbor]) {
                // Atomically set visited[neighbor] = 1 if it was 0
                if (__sync_bool_compare_and_swap(&visited[neighbor], 0, 1)) {
                    #pragma omp critical
                    {
                        stk.push(neighbor);
                    }
                }
            }
        }
    }
}

int main() {
    cout << "Enter number of nodes and edges: ";
    int n, m;
    cin >> n >> m;

    vector<vector<int>> adj(n + 1);  // Adjacency list (1-based indexing)

    cout << "Enter Edges (U V):" << endl;
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);  // For undirected graph
    }

    vector<int> visited_bfs(n + 1, 0);
    vector<int> visited_dfs(n + 1, 0);

    cout << "\nParallel BFS traversal:\n";
    bfs(1, adj, visited_bfs);  // Starting from node 1

    cout << "\n\nParallel DFS traversal:\n";
    dfs(1, adj, visited_dfs);  // Starting from node 1

    return 0;
}



// Merge_BUBBLE_SORT
#include<iostream>
#include<omp.h>
using namespace std;

#define MAX 100000

void merge(int arr[], int l, int m, int r){
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (int i = 0; i < n1; i++){
        L[i] = arr[l + i];
    }
    for (int i = 0; i < n2; i++){
        R[i] = arr[m + 1 + i];
    }

    int i = 0, j = 0, k = l;

    while(i < n1 && j < n2) {
        if (L[i] < R[j]){  
            arr[k++] = L[i++];
        }
        else{
            arr[k++] = R[j++];
        }
    }

    while (i < n1){
        arr[k++] = L[i++];
    }
    while (j < n2){
        arr[k++] = R[j++];
    }

}

void sequentialMergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = (l + r) / 2;
        sequentialMergeSort(arr, l, m);
        sequentialMergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void parallelMergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = (l + r) / 2;

        #pragma omp parallel sections
        {
            #pragma omp section
            parallelMergeSort(arr, l, m);  // Recursive parallel call

            #pragma omp section
            parallelMergeSort(arr, m + 1, r);  // Recursive parallel call
        }

        merge(arr, l, m, r);
    }
}

int main(){
    int arr1[MAX];
    int arr2[MAX];
    double start,end;

    int a;
    for(int i=0; i<MAX;i++){
        a = rand() % 101;  // 0 to 100
        arr1[i] = arr2[2] = a;
    }

    start = omp_get_wtime();
    sequentialMergeSort(arr1,0,MAX);
    end = omp_get_wtime();

    cout<<"Time:"<<(end-start)*1000<<endl;
    cout<<"-------------"<<endl;

    start = omp_get_wtime();
    parallelMergeSort(arr2,0,MAX);
    end = omp_get_wtime();

    cout<<"Time:"<<(end-start)*1000<<endl;
    cout<<"-------------"<<endl;

}


#include<iostream>
#include<omp.h>

using namespace std;

#define MAX 100000

void bubble_sort(int arr[],int n){
    for(int i=0;i<n-1;i++){
        for(int j=0;j<n-i-1;j++){
            if(arr[j]>arr[j+1]){
                swap(arr[j],arr[j+1]);
            }
        }
    }
}

void print_array(int arr[],int n){
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
}

void bubble_sort_parallel(int arr[],int n){
    for(int i=0;i<n;i++){
        //odd
        if(i%2==1){
            #pragma omp parallel for
            for(int j=1;j<n-1;j+=2){
                if(arr[j]>arr[j+1]){
                    swap(arr[j],arr[j+1]);
                }
            }
        }else{
            #pragma omp parallel for
            for(int j=0;j<n-1;j+=2){
                if(arr[j]>arr[j+1]){
                    swap(arr[j],arr[j+1]);
                }
            }
        }
    }
}


int main(){
    double start, end;
    
    int arr1[MAX];
    int arr2[MAX];

    int a;
    for(int i=0; i<MAX;i++){
        a = rand() % 101;  // 0 to 100
        arr1[i] = arr2[i] = a;
    }

    start = omp_get_wtime();
    bubble_sort(arr1,MAX);
    end = omp_get_wtime();

    cout<<"-----------"<<endl;
    print_array(arr1,MAX);
    cout<<"time:"<<(end-start)*1000<<endl;

    int arr2[MAX];
    for(int i=0;i<MAX;i++){
        cin>>arr2[i];
    }

    start = omp_get_wtime();
    bubble_sort_parallel(arr2,MAX);
    end = omp_get_wtime();

    cout<<"-----------"<<endl;
    print_array(arr2,MAX);
    cout<<"time:"<<(end-start)*1000<<endl;


}

// PARALLEL_REDUCTION
#include <iostream>
#include <vector>
#include <omp.h>
#include <climits>

using namespace std;

void min_reduction(vector<int>& arr) {
    int min_value = INT_MAX;
    #pragma omp parallel for reduction(min: min_value)
    for (int i = 0; i < arr.size(); i++) {
        if (arr[i] < min_value) {
            min_value = arr[i];
        }
    }
    cout << "Minimum value: " << min_value << endl;
}

void max_reduction(vector<int>& arr) {
    int max_value = INT_MIN;
    #pragma omp parallel for reduction(max: max_value)
    for (int i = 0; i < arr.size(); i++) {
        if (arr[i] > max_value) {
            max_value = arr[i];
        }
    }
    cout << "Maximum value: " << max_value << endl;
}

void sum_reduction(vector<int>& arr) {
    int sum = 0;
    #pragma omp parallel for reduction(+: sum)
    for (int i = 0; i < arr.size(); i++) {
        sum += arr[i];
    }
    cout << "Sum: " << sum << endl;
}

void average_reduction(vector<int>& arr) {
    int sum = 0;
    #pragma omp parallel for reduction(+: sum)
    for (int i = 0; i < arr.size(); i++) {
        sum += arr[i];
    }
    cout << "Average: " << (double)sum / arr.size() << endl;
}

int main() {
    vector<int> arr;
    int n, val;

    cout << "Enter number of elements: ";
    cin >> n;

    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; ++i) {
        cin >> val;
        arr.push_back(val);
    }

    min_reduction(arr);
    max_reduction(arr);
    sum_reduction(arr);
    average_reduction(arr);

    return 0;
}

/*
user:~/Downloads/A/A$ g++ -fopenmp red.cpp -o red
user:~/Downloads/A/A$ ./red
Enter number of elements: 5
Enter 5 elements:
10 25 7 8 12
Minimum value: 7
Maximum value: 25
Sum: 62
Average: 12.4
*/

//MATRIX_MULTIPLICATION

%%writefile matmul.cu

#include<stdio.h>
#include<time.h>
#define SIZE 2

int A[SIZE][SIZE];
int B[SIZE][SIZE];

void createMatrix(){
  for(int i=0; i<SIZE; i++){
    for(int j=0; j<SIZE;j++){
      A[i][j] = rand()%101;
    }
  }

  for(int i=0; i<SIZE; i++){
    for(int j=0; j<SIZE;j++){
      B[i][j] = rand()%1001;
    }
  }
}

void printMatrix(int A[][SIZE]){
  for(int i=0; i<SIZE; i++){
    for(int j=0; j<SIZE;j++){
      printf("%d ",A[i][j] );
    }
    printf("\n");
  }
 printf("\n");
}

void seqMultiply(int C[][SIZE]){
  for(int i=0; i<SIZE;i++){
    for(int j=0; j<SIZE; j++){
      for(int k=0; k<SIZE; k++){
        C[i][j] += A[i][k] * B[k][j];
      }
    }
  }
}
__global__ void parallelMultipy(int *A, int *B, int *C, int n){
  int row = threadIdx.y;
  int col = threadIdx.x;
  int sum = 0;
  if(row<n && row<n){
    for(int k=0; k<n; k++){
      sum += A[row*n+k] * B[k*n+col];
    }
    C[row*n+col] = sum;
  }
}
int main(){
  int C[SIZE][SIZE]={0};
  int *d_A, *d_B, *d_C;
  clock_t start, end;

  createMatrix();
  printf("\n\n--- A ---\n");
  printMatrix(A);
  printf("\n\n--- b ---\n");
  printMatrix(B);

  start = clock();
  seqMultiply(C);
  end = clock();
  printf("\n\n--- Sequential ---\n");
  printMatrix(C);
  printf("Time = %f sec.", (double)(end-start)/CLOCKS_PER_SEC);

  int size = SIZE*SIZE*sizeof(int);
  cudaMalloc(&d_A, size);
  cudaMalloc(&d_B, size);
  cudaMalloc(&d_C, size);

  cudaMemcpy(d_A, &A, size, cudaMemcpyHostToDevice);
  cudaMemcpy(d_B, &B, size, cudaMemcpyHostToDevice);

  start = clock();
  dim3 blockDimension(SIZE,SIZE);
  parallelMultipy<<<1,blockDimension>>>(d_A, d_B, d_C, SIZE);
  cudaDeviceSynchronize();
  cudaMemcpy(&C, d_C, size, cudaMemcpyDeviceToHost);
  end = clock();
  printf("\n\n--- Parallel ---\n");
  printMatrix(C);
  printf("Time = %f sec.", (double)(end-start)/CLOCKS_PER_SEC);

}


!nvcc -arch=sm_75 matmul.cu -o matmul.exe
!./matmul.exe
