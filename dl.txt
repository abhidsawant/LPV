//DL1

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import root_mean_squared_error

df = pd.read_csv("housing_data.csv")
df.head()

df.info()

df.isnull().sum()

df.fillna(df.mean(), inplace=True)

df.isnull().sum()

df.describe()

sns.displot(df['MEDV'])
sns.boxplot(df['MEDV'])

df.corr()

plt.figure(figsize=(10,12))
sns.heatmap(df.corr(), annot=True)

sns.scatterplot(x=df['RM'], y=df['MEDV'])

X_train, X_test, y_train, y_test = train_test_split(df.drop('MEDV', axis=1), df['MEDV'], test_size=0.33, random_state=42)

X_train.shape

X_test.shape

sc = StandardScaler()
X_train_scaled = sc.fit_transform(X_train)
X_test_scaled = sc.transform(X_test)

lm = LinearRegression()
lm.fit(X_train_scaled, y_train)

y_pred = lm.predict(X_test_scaled) 

print("RMSE = ", root_mean_squared_error(y_test,y_pred))    

X_test_scaled.shape

model = keras.models.Sequential([
    keras.layers.Dense(128, input_shape=(13,), activation='relu'),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(32, activation='relu'),
    keras.layers.Dense(1)
])

model.compile(optimizer='adam',
             loss='mean_squared_error',
             metrics=['mse']
    )

model.fit(X_train_scaled, y_train, epochs=50)

test_loss, test_mae = model.evaluate(X_test_scaled,y_test)
print("Test RMSE:", np.sqrt(test_mae))


//FASHION_DATASET
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras
import numpy as np
from tqdm.notebook import tqdm

(x_train, y_train), (x_test, y_test) = keras.datasets.fashion_mnist.load_data()

plt.imshow(x_train[0])

plt.imshow(x_train[5])

plt.imshow(x_train[3])

x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0
x_train = x_train.reshape(-1, 28, 28, 1)
x_test = x_test.reshape(-1, 28, 28, 1)

x_train.shape

x_test.shape

y_train.shape

y_test.shape

model = keras.Sequential([
    keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    keras.layers.MaxPooling2D((2,2)),
    keras.layers.Dropout(0.25),
    keras.layers.Conv2D(64, (3,3), activation='relu'),
    keras.layers.MaxPooling2D((2,2)),
    keras.layers.Dropout(0.25),
    keras.layers.Conv2D(128, (3,3), activation='relu'),
    keras.layers.Flatten(),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dropout(0.25),
    keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.summary()

batch_size = 64
epochs = 15

history_list = []
with tqdm(total=epochs, desc="Training Progress") as pbar:
    for epoch in range(epochs):
        history = model.fit(x_train, y_train, batch_size=batch_size, epochs=1, verbose=0, validation_data=(x_test, y_test))
        history_list.append(history.history)
        pbar.update(1)

val_accuracy = history_list[-1]['val_accuracy'][0]
print('Validation Accuracy (last epoch):', val_accuracy)

score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])



  
